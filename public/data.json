[
  {
    "id": 1,
    "question": "What is the result of this code?",
    "code": "console.log(typeof NaN)",
    "answers": ["undefined", "NaN", "string", "number"],
    "correctAnswer": 3,
    "explanation": "The typeof operator returns the data type of a value. <br>NaN represents a special numeric value that means 'Not a Number'. Its type is 'number'."
  },
  {
    "id": 2,
    "question": "What is the result of the following expression?",
    "code": "3 + 2 + '7'",
    "answers": ["12", "327", "57", "NaN"],
    "correctAnswer": 2,
    "explanation": "In JavaScript, when an operation is encountered between a number and a string, the number is converted to a string and concatenation is performed. Therefore, '3 + 2' equals 5, and when concatenated with '7', the result is '57'."
  },
  {
    "id": 3,
    "question": "What is the output of this code?",
    "code": "let a = 10;\nlet b = () => {\n  console.log(this.a);\n}\nb();",
    "answers": ["undefined", "null", "10", "ReferenceError"],
    "correctAnswer": 0,
    "explanation": "In this case, the function b is an arrow function, which does not have its own this object. Therefore, this.a refers to undefined."
  },
  {
    "id": 4,
    "question": "What is the result of the following expression?",
    "code": "1 + 2 + '3' + 4 + 5",
    "answers": ["'3345'", "15", "NaN", "Error"],
    "correctAnswer": 0,
    "explanation": "In this expression, concatenation of values is performed. The concatenation is done from left to right, so the numeric values are converted to strings. Therefore, the final result is the string '3345'."
  },
  {
    "id": 5,
    "question": "What is the output of this code?",
    "code": "for (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1);\n}",
    "answers": ["0 1 2", "3 3 3", "1 2 3", "2 1 0"],
    "correctAnswer": 1,
    "explanation": "In this code, the setTimeout function is used to print the value of i after 1 millisecond. However, due to the behavior of var variables in JavaScript, the loop will have already completed by the time the function is executed, and the final value of i will be 3 for all iterations of the loop."
  },
  {
    "id": 6,
    "question": "What is the result of the following expression?",
    "code": "2 > '3'",
    "answers": ["true", "false", "undefined", "NaN"],
    "correctAnswer": 1,
    "explanation": "When comparing a number and a string, JavaScript attempts to convert the string into a number before performing the comparison. In this case, '3' is converted to the number 3. The comparison 2 > 3 is false."
  },
  {
    "id": 7,
    "question": "What is the output of this code?",
    "code": "console.log(1 + +'2' + '2');",
    "answers": ["'122'", "'32'", "NaN", "Error"],
    "correctAnswer": 0,
    "explanation": "In this expression, the unary '+' operator is used to convert the string '2' into a number. The addition 1 + 2 + 2 is performed between numbers, and then concatenated with the result '122'."
  },
  {
    "id": 8,
    "question": "What is the result of the following expression?",
    "code": "typeof typeof 1",
    "answers": ["number", "string", "undefined", "Error"],
    "correctAnswer": 1,
    "explanation": "The typeof operator returns a string representing the data type of a value. In this case, typeof 1 returns 'number', and typeof 'number' returns 'string'."
  },
  {
    "id": 9,
    "question": "What is the result of this code?",
    "code": "console.log(1 == '1');",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 0,
    "explanation": "When using the equality operator == in JavaScript, implicit type conversion is performed. In this case, the number 1 is converted to a string before the comparison, so 1 == '1' is true."
  },
  {
    "id": 10,
    "question": "What is the output of this code?",
    "code": "console.log('Hello' - 'World');",
    "answers": ["'HelloWorld'", "NaN", "NaN", "Error"],
    "correctAnswer": 2,
    "explanation": "When attempting to perform arithmetic operation between two strings, JavaScript tries to convert the strings into numbers. However, 'Hello' and 'World' cannot be converted into numbers, so the operation results in NaN (Not a Number)."
  },
  {
    "id": 11,
    "question": "What is the result of the following expression?",
    "code": "[] + []",
    "answers": ["''", "0", "[]", "Error"],
    "correctAnswer": 0,
    "explanation": "When using the addition operator between two arrays, JavaScript converts them to strings by calling the `toString` method on each array. An empty array `[]` converts to an empty string `''`. Therefore, the result is an empty string."
  },
  {
    "id": 12,
    "question": "What is the output of this code?",
    "code": "console.log(typeof null)",
    "answers": ["object", "null", "undefined", "Error"],
    "correctAnswer": 0,
    "explanation": "The `typeof` operator returns 'object' for the `null` value. This is a historical bug in JavaScript and is considered an error in the language."
  },
  {
    "id": 13,
    "question": "What is the result of the following expression?",
    "code": "5 == '5'",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 0,
    "explanation": "When using the equality operator `==` in JavaScript, implicit type conversion is performed. In this case, the string `'5'` is converted to a number before the comparison, so `5 == '5'` is true."
  },
  {
    "id": 14,
    "question": "What is the output of this code?",
    "code": "console.log(2 ** 3)",
    "answers": ["8", "5", "6", "Error"],
    "correctAnswer": 0,
    "explanation": "The `**` operator is the exponentiation operator introduced in ECMAScript 2016. `2 ** 3` means 2 raised to the power of 3, which is equal to 8."
  },
  {
    "id": 15,
    "question": "What is the result of the following expression?",
    "code": "'20' + 1 - 1",
    "answers": ["20", "10", "21", "Error"],
    "correctAnswer": 1,
    "explanation": "When using the addition operator `+` between a string and a number, JavaScript performs string concatenation. However, when using the subtraction operator `-`, JavaScript performs numerical subtraction. Therefore, `'20' + 1 - 1` equals `'201' - 1`, which results in the number 10."
  },
  {
    "id": 16,
    "question": "What is the output of this code?",
    "code": "console.log([] == ![])",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 0,
    "explanation": "The `!` operator inverts the truthiness of a value. An empty array `[]` is a truthy value, and its inversion `![]` is `false`. When using the equality operator `==` in JavaScript, implicit type conversion is performed. In this case, `false` is converted to the number `0` before the comparison, so `[] == ![]` is true."
  },
  {
    "id": 17,
    "question": "What is the result of the following expression?",
    "code": "typeof [] === typeof {}",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 0,
    "explanation": "The `typeof` operator returns a string representing the data type of a value. The `[]` expression creates an array, which has a type of `'object'`. Similarly, the `{}` expression creates an object, which also has a type of `'object'`. Therefore, `typeof [] === typeof {}` is true."
  },
  {
    "id": 18,
    "question": "What is the output of this code?",
    "code": "console.log(3 > 2 > 1)",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 1,
    "explanation": "The > operator performs a numerical comparison. The expression `3 > 2` evaluates to `true`. However, when using the `>` operator multiple times, JavaScript performs left-to-right associativity. So, `true > 1` is equivalent to `1 > 1`, which evaluates to `false`."
  },
  {
    "id": 19,
    "question": "What is the result of the following expression?",
    "code": "1 + -'1'",
    "answers": ["0", "-1", "NaN", "Error"],
    "correctAnswer": 0,
    "explanation": "The unary `-` operator inverts the sign of a value. The string `-'1'` is converted to the number `-1`. When adding `1` and `-1`, the result is `0`."
  },
  {
    "id": 20,
    "question": "What is the output of this code?",
    "code": "console.log((() => { return 5 })())",
    "answers": ["undefined", "5", "SyntaxError", "Error"],
    "correctAnswer": 1,
    "explanation": "This code defines an arrow function that immediately invokes itself. The arrow function `() => { return 5 }` returns the value `5`. The extra pair of parentheses at the end `(())` invokes the function and logs the returned value `5`."
  },
  {
    "id": 21,
    "question": "What is the output of this code?",
    "code": "console.log('5' - 3)",
    "answers": ["2", "8", "NaN", "Error"],
    "correctAnswer": 0,
    "explanation": "When using the subtraction operator `-` between a string and a number, JavaScript converts the string to a number before performing the subtraction. So, `'5' - 3` is equal to `5 - 3`, which evaluates to `2`."
  },
  {
    "id": 22,
    "question": "What is the result of the following expression?",
    "code": "false + true",
    "answers": ["false", "true", "1", "Error"],
    "correctAnswer": 2,
    "explanation": "When using the `+` operator between boolean values, JavaScript converts `false` to `0` and `true` to `1`. So, `false + true` evaluates to `0 + 1`, which equals `1`."
  },
  {
    "id": 23,
    "question": "What is the output of this code?",
    "code": "console.log([] instanceof Array)",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 0,
    "explanation": "The `instanceof` operator checks if an object belongs to a specific class or constructor. In this case, `[]` is an instance of the `Array` class, so `[] instanceof Array` is true."
  },
  {
    "id": 24,
    "question": "What is the result of the following expression?",
    "code": "'Hello' instanceof String",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 1,
    "explanation": "When using the `instanceof` operator with a primitive value, JavaScript automatically converts the primitive value to its corresponding object wrapper. In this case, `'Hello'` is automatically converted to a `String` object. However, the `String` object is not an instance of the `String` constructor, so `'Hello' instanceof String` is false."
  },
  {
    "id": 25,
    "question": "What is the output of this code?",
    "code": "console.log(Math.max([1, 2, 3]))",
    "answers": ["1", "2", "3", "Error"],
    "correctAnswer": 3,
    "explanation": "The `Math.max()` function expects individual arguments, not an array. When passing an array `[1, 2, 3]`, the function returns `NaN` because it cannot compare an array with numbers directly. Thus, an error occurs."
  },
  {
    "id": 26,
    "question": "What is the result of the following expression?",
    "code": "'Hello' + 5 * 2",
    "answers": ["'Hello10'", "'Hello52'", "'Hello7'", "Error"],
    "correctAnswer": 0,
    "explanation": "The multiplication operator `*` has higher precedence than the addition operator `+`. So, `5 * 2` evaluates to `10`. When concatenating the string `'Hello'` with the number `10`, the result is the string `'Hello10'`."
  },
  {
    "id": 27,
    "question": "What is the output of this code?",
    "code": "console.log([10] === [10])",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 1,
    "explanation": "When comparing two arrays using the strict equality operator `===`, JavaScript checks if they refer to the same memory location. Even if the arrays have the same values, they are considered different objects, so `[10] === [10]` evaluates to `false`."
  },
  {
    "id": 28,
    "question": "What is the result of the following expression?",
    "code": "NaN === NaN",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 1,
    "explanation": "NaN (Not-a-Number) is a special numeric value that represents an unrepresentable result. In JavaScript, NaN is considered not equal to any other value, including itself. So, `NaN === NaN` evaluates to `false`."
  },
  {
    "id": 29,
    "question": "What is the output of this code?",
    "code": "console.log(0.1 + 0.2 === 0.3)",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 1,
    "explanation": "Due to the limitations of floating-point arithmetic, the expression `0.1 + 0.2` does not result in exactly `0.3`. It is a close approximation but not an exact match. Therefore, `0.1 + 0.2 === 0.3` evaluates to `false`."
  },
  {
    "id": 30,
    "question": "What is the result of the following expression?",
    "code": "typeof typeof 1",
    "answers": ["'number'", "'string'", "'undefined'", "'Error'"],
    "correctAnswer": 1,
    "explanation": "The `typeof` operator returns a string indicating the data type of a value. In this case, `typeof 1` returns the string `'number'`. So, `typeof 'number'` evaluates to `'string'`."
  },
  {
    "id": 31,
    "question": "What is the output of this code?",
    "code": "console.log(2 + '2' - 1)",
    "answers": ["3", "'21'", "'221'", "Error"],
    "correctAnswer": 1,
    "explanation": "When using the `+` operator between a number and a string, JavaScript converts the number to a string and performs string concatenation. So, `2 + '2'` evaluates to the string `'22'`. Then, the `-` operator tries to subtract `1` from the string, which triggers automatic string-to-number conversion. Therefore, `'22' - 1` equals `21`."
  },
  {
    "id": 32,
    "question": "What is the result of the following expression?",
    "code": "null == undefined",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 0,
    "explanation": "The `==` operator performs type coercion before comparison. When comparing `null` and `undefined`, they are considered equal in value but different in type. So, `null == undefined` evaluates to `true`."
  },
  {
    "id": 33,
    "question": "What is the output of this code?",
    "code": "console.log('Hello'.length)",
    "answers": ["5", "4", "6", "Error"],
    "correctAnswer": 0,
    "explanation": "The `length` property is used to determine the number of characters in a string. In this case, the string `'Hello'` has 5 characters, so `console.log('Hello'.length)` outputs `5`."
  },
  {
    "id": 34,
    "question": "What is the result of the following expression?",
    "code": "typeof NaN",
    "answers": ["'number'", "'NaN'", "'undefined'", "'Error'"],
    "correctAnswer": 0,
    "explanation": "NaN (Not-a-Number) is a special numeric value representing an unrepresentable result. Despite being called NaN, its type in JavaScript is 'number'. Therefore, typeof NaN evaluates to 'number'."
  },
  {
    "id": 35,
    "question": "What is the output of this code?",
    "code": "console.log(typeof typeof null)",
    "answers": ["'object'", "'null'", "'undefined'", "'string'"],
    "correctAnswer": 3,
    "explanation": "The typeof operator returns a string indicating the data type of a value. In this case, typeof null evaluates to 'object'. So, typeof 'object' evaluates to 'string'."
  },
  {
    "id": 36,
    "question": "What is the result of the following expression?",
    "code": "[] == ![]",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 0,
    "explanation": "The == operator performs type coercion before comparison. The ! operator negates the truthiness of a value. When [] (an empty array) is coerced to a boolean, it becomes true. So, ![] evaluates to false. Since true and false have the same type, they are compared as numbers. In numeric comparison, true is treated as 1, and false is treated as 0. Therefore, [] == ![] is equivalent to [] == 0, which evaluates to true."
  },
  {
    "id": 37,
    "question": "What is the output of this code?",
    "code": "console.log(3.toString())",
    "answers": ["'3'", "3", "undefined", "Error"],
    "correctAnswer": 3,
    "explanation": "When trying to call a method on a numeric literal directly, you need to use parentheses or convert the number to a string explicitly. In this case, `3.toString()` throws an error because the period (`.`) after the number is interpreted as a decimal point. To fix this, you can enclose the number in parentheses like `(3).toString()` or convert it to a string using the `String` function like `String(3)`."
  },
  {
    "id": 38,
    "question": "What is the output of this code?",
    "code": "console.log(typeof 42)",
    "answers": ["'number'", "'string'", "'boolean'", "'undefined'"],
    "correctAnswer": 0,
    "explanation": "The `typeof` operator returns a string indicating the data type of a value. In this case, the number `42` has a type of `'number'`. Therefore, `console.log(typeof 42)` outputs `'number'`."
  },
  {
    "id": 39,
    "question": "What is the result of the following expression?",
    "code": "NaN === NaN",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 1,
    "explanation": "NaN (Not-a-Number) is a special numeric value representing an unrepresentable result. Surprisingly, NaN is not equal to itself. So, `NaN === NaN` evaluates to `false`."
  },
  {
    "id": 40,
    "question": "What is the output of this code?",
    "code": "console.log(1 + '1' + 1)",
    "answers": ["'111'", "111", "3", "Error"],
    "correctAnswer": 0,
    "explanation": "When using the `+` operator between a string and a number, JavaScript performs string concatenation. In this case, `1 + '1'` evaluates to the string `'11'`. Then, `'11' + 1` also performs string concatenation, resulting in the string `'111'`. Therefore, `console.log(1 + '1' + 1)` outputs `'111'`."
  },
  {
    "id": 41,
    "question": "What is the output of this code?",
    "code": "console.log('10' - 5)",
    "answers": ["15", "'105'", "5", "Error"],
    "correctAnswer": 2,
    "explanation": "When the - operator is used between a string and a number, JavaScript tries to convert the string to a number. In this case, the string '10' is converted to the number 10, and the subtraction operation 10 - 5 results in 5."
  },
  {
    "id": 42,
    "question": "What is the result of the following expression?",
    "code": "false == ''",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 0,
    "explanation": "The == operator performs type coercion before comparison. When comparing a boolean (false) and an empty string (''), they are both considered falsy values and are considered equal in value. Therefore, false == '' evaluates to true."
  },
  {
    "id": 43,
    "question": "What is the output of this code?",
    "code": "console.log([1, 2] + [3, 4])",
    "answers": ["'1,23,4'", "4", "[1, 2, 3, 4]", "Error"],
    "correctAnswer": 0,
    "explanation": "When the + operator is used between arrays, JavaScript converts the arrays to strings and performs string concatenation. In this case, [1, 2] is converted to the string '1,2', and [3, 4] is converted to the string '3,4'. The concatenation of these strings results in '1,23,4'."
  },
  {
    "id": 44,
    "question": "What is the result of the following expression?",
    "code": "typeof []",
    "answers": ["'object'", "'array'", "'undefined'", "'Error'"],
    "correctAnswer": 0,
    "explanation": "In JavaScript, arrays are considered a special type of object. Therefore, the typeof operator returns 'object' when used with an array."
  },
  {
    "id": 45,
    "question": "What is the output of this code?",
    "code": "console.log(null + 5)",
    "answers": ["5", "null5", "undefined", "Error"],
    "correctAnswer": 0,
    "explanation": "When the + operator is used between null and a number, null is coerced to the number 0. So, null + 5 evaluates to 5."
  },
  {
    "id": 46,
    "question": "What is the result of the following expression?",
    "code": "true === 'true'",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 1,
    "explanation": "The === operator performs strict equality comparison without type coercion. When comparing a boolean (true) and a string ('true'), they are different in type and value. Therefore, true === 'true' evaluates to false."
  },
  {
    "id": 47,
    "question": "What is the output of this code?",
    "code": "console.log(Math.max([1, 2, 3]))",
    "answers": ["3", "[1, 2, 3]", "undefined", "Error"],
    "correctAnswer": 2,
    "explanation": "The Math.max function expects individual numeric arguments, not an array. When passed an array, it evaluates Math.max(NaN) because the array is converted to a string. As a result, console.log(Math.max([1, 2, 3])) outputs NaN (Not-a-Number)."
  },
  {
    "id": 48,
    "question": "What is the result of the following expression?",
    "code": "'5' - - '2'",
    "answers": ["3", "7", "'52'", "Error"],
    "correctAnswer": 1,
    "explanation": "The - operator performs subtraction. However, when used consecutively as - -, it cancels out and acts as an addition operator. In this case, '5' - - '2' is equivalent to '5' + '2', which results in the string '52'."
  },
  {
    "id": 49,
    "question": "What is the output of this code?",
    "code": "console.log('OpenAI'.substring(2, 5))",
    "answers": ["'enA'", "'pen'", "'enAI'", "Error"],
    "correctAnswer": 0,
    "explanation": "The substring method is used to extract a portion of a string between two indices. In this case, 'OpenAI'.substring(2, 5) extracts the characters from index 2 to index 4 (excluding the character at index 5). Therefore, it outputs the string 'enA'."
  },
  {
    "id": 50,
    "question": "What is the result of the following expression?",
    "code": "undefined == null",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 0,
    "explanation": "The == operator performs type coercion before comparison. When comparing undefined and null, they are considered equal in value. Therefore, undefined == null evaluates to true."
  },
  {
    "id": 51,
    "question": "What is the output of this code?",
    "code": "console.log(typeof NaN)",
    "answers": ["'number'", "'NaN'", "'undefined'", "'Error'"],
    "correctAnswer": 0,
    "explanation": "The typeof operator returns 'number' when used with NaN. Despite being classified as a number, NaN represents an invalid or unrepresentable value. It stands for 'Not-a-Number'."
  },
  {
    "id": 52,
    "question": "What is the result of the following expression?",
    "code": "'foo' + 2 + 3",
    "answers": ["'foo23'", "'foo5'", "'NaN'", "'Error'"],
    "correctAnswer": 0,
    "explanation": "When the + operator encounters a string operand, it performs string concatenation. In this case, 'foo' + 2 results in 'foo2', and then 'foo2' + 3 results in 'foo23'."
  },
  {
    "id": 53,
    "question": "What is the output of this code?",
    "code": "console.log(0.1 + 0.2 === 0.3)",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 1,
    "explanation": "Due to floating-point precision limitations, the expression 0.1 + 0.2 does not evaluate to exactly 0.3. Therefore, 0.1 + 0.2 === 0.3 returns false."
  },
  {
    "id": 54,
    "question": "What is the result of the following expression?",
    "code": "5 > 4 > 3",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 1,
    "explanation": "The comparison operators (> in this case) are left-to-right associative. The expression is evaluated as (5 > 4) > 3, which becomes true > 3. When comparing a boolean (true) with a number (3), the boolean is coerced to a number (1). Therefore, the expression becomes 1 > 3, which is false."
  },
  {
    "id": 55,
    "question": "What is the output of this code?",
    "code": "console.log('10' + 5)",
    "answers": ["'105'", "105", "'15'", "Error"],
    "correctAnswer": 0,
    "explanation": "When the + operator encounters a string operand, it performs string concatenation. In this case, '10' + 5 results in the string '105'."
  },
  {
    "id": 56,
    "question": "What is the result of the following expression?",
    "code": "[] == ![]",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 0,
    "explanation": "The == operator performs type coercion before comparison. The right-hand side ![] is evaluated as false, and the left-hand side [] is an empty array (a truthy value). When comparing a truthy value with false, they are considered equal in value. Therefore, [] == ![] returns true."
  },
  {
    "id": 57,
    "question": "What is the output of this code?",
    "code": "console.log(2 ** 3)",
    "answers": ["5", "6", "8", "Error"],
    "correctAnswer": 2,
    "explanation": "The ** operator is the exponentiation operator introduced in ECMAScript 2016 (ES7). It raises the left operand to the power of the right operand. In this case, 2 ** 3 results in 8."
  },
  {
    "id": 58,
    "question": "What is the result of the following expression?",
    "code": "console.log([] + {})",
    "answers": ["'[]{}'", "'[object Object]'", "'[object Array]'", "Error"],
    "correctAnswer": 1,
    "explanation": "When the + operator encounters an object operand, it converts it to a string using the toString method. An empty array [] is converted to an empty string '', and the object {} is converted to '[object Object]'. Therefore, [] + {} outputs '[object Object]'."
  },
  {
    "id": 59,
    "question": "What is the output of this code?",
    "code": "console.log(2 + '2' - 1)",
    "answers": ["3", "21", "'21'", "Error"],
    "correctAnswer": 2,
    "explanation": "When the + operator encounters a string operand, it performs string concatenation. In this case, 2 + '2' results in the string '22'. Then, '22' - 1 performs subtraction and tries to convert '22' to a number, resulting in the number 21."
  },
  {
    "id": 60,
    "question": "What is the result of the following expression?",
    "code": "console.log('2' > '12')",
    "answers": ["true", "false", "undefined", "Error"],
    "correctAnswer": 1,
    "explanation": "When comparing strings, JavaScript performs character-by-character comparison based on Unicode values. In this case, the first characters '2' and '1' are compared, and since '2' is greater than '1', the expression '2' > '12' returns false."
  }
]
